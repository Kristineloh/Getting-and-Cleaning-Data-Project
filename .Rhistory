## Return hospital name in that state with lowest 30-day death rate
data.state <- data[data$State==state,]
# order data by outcome
sorted.data.state <- suppressWarnings(data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ])
#handle num input
if (num=="best") num = 1
if (num=='worst') num = nrow(sorted.data.state)
sorted.data.state[num,"Hospital.Name"]
}
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("~/Desktop/ProgAssignment3/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = unique(data[,7])
if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## Return hospital name in that state with lowest 30-day death rate
data.state <- data[data$State==state,]
# order data by outcome
sorted.data.state <- suppressWarnings(data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ])
#handle num input
if (num=="best") num = 1
if (num=='worst') num = nrow(sorted.data.state)
sorted.data.state[num,"Hospital.Name"]
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital("MD", "heart failure",5)
head("TX")
rankhospital("TX","heart failure",3)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("~/Desktop/ProgAssignment3/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = unique(data[,7])
if (!state %in% validState) {stop("invalid state")}
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- suppressWarnings(data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ])
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
head(rankall("heart attack",20),10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("~/Desktop/ProgAssignment3/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = unique(data[,7])
if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- suppressWarnings(data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ])
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
head(rankall("heart attack",20),10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("~/Desktop/ProgAssignment3/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = sort(unique(data[,7]))
if (!state %in% validState) {stop("invalid state")}
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- suppressWarnings(data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ])
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
head(rankall("heart attack",20),10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("~/Desktop/ProgAssignment3/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## For each state, find the hospital of the given rank
hospital<-character(0)
validState = sort(unique(data[,7]))
if (!state %in% validState) {stop("invalid state")}
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- suppressWarnings(data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ])
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
head(rankall("heart attack",20),10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("~/Desktop/ProgAssignment3/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = sort(unique(data[,7]))
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- suppressWarnings(data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ])
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
head(rankall("heart attack",20),10)
tail(rankall("pneumonia","worst"),3)
tail(rankall("heart failure"),10)
View(data.state)
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("~/Desktop/ProgAssignment3/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
illness = c("heart attack","heart failure","pneumonia")
if (!outcome %in% illness) { stop("invalid outcome")}
abbState = unique(data[,7])
if (!state %in% abbState) {stop("invalid state")}
## convert outcome name into column name
longColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- longColName[match(outcome,illness)]
## Return hospital name in that state with lowest 30-day death rate
data.state <- data[data$State==state,]
idx <- suppressWarnings(which.min(as.double(data.state[,colName])))
data.state[idx,"Hospital.Name"]
}
best("MD","pneumonia")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("~/Desktop/ProgAssignment3/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
illness = c("heart attack","heart failure","pneumonia")
if (!outcome %in% illness) { stop("invalid outcome")}
abbState = unique(data[,7])
if (!state %in% abbState) {stop("invalid state")}
## convert outcome name into column name
longColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- longColName[match(outcome,illness)]
## Return hospital name in that state with lowest 30-day death rate
data.state <- data[data$State==state,]
# order data by outcome
sorted.data.state <- suppressWarnings(data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ])
#handle num input
if (num=="best") num = 1
if (num=='worst') num = nrow(sorted.data.state)
sorted.data.state[num,"Hospital.Name"]
}
rankhospital("TX", "heart attack",4)
rankhospital("TX", "heart failure",4)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("~/Desktop/ProgAssignment3/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
illness = c("heart attack","heart failure","pneumonia")
if (!outcome %in% illness) { stop("invalid outcome")}
abbState = sort(unique(data[,7]))
## convert outcome name into column name
longColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- longColName[match(outcome,illness)]
## For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(abbState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==abbState[i],]
# order data by outcome
sorted.data.state <- suppressWarnings(data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ])
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=abbState,row.names=abbState)
}
tail(rankall("pneumonia","worst"),3)
source(~/Desktop/ProgAssignment3/submitscript3.R)
source(Desktop/ProgAssignment3/submitscript3.R)
source(~Desktop/ProgAssignment3/submitscript3.R)
?for
?for()
na.strings
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
x[[c(1, 3)]]
install.packages("dplyr")
seq(0, 1, 0.2)
library(xlsx)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileURL,destfile = "./Q1Q3.xlsx", method = "curl")
data <- read.xlsx("Q1Q3.xlsx", header = TRUE,sheetIndex=1)
dat<-data[18:23,7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
data <- read.xlsx("Q1Q3.xlsx", rowIndex = rowIndex, colIndex = colIndex, header = TRUE,sheetIndex=1)
dat<-data[18:23,7:15]names(dat)<-c("Zip","cuCurrent","PaCurrent","PoCurrent","Contact","Ext","Fax","email","Status")
data <- read.xlsx("Q1Q3.xlsx", header = TRUE,sheetIndex=1)dat<-data[18:23,7:15]names(dat)<-c("Zip","cuCurrent","PaCurrent","PoCurrent","Contact","Ext","Fax","email","Status")
data <- read.xlsx("Q1Q3.xlsx", header = TRUE, sheetIndex=1)
dat<-data[18:23,7:15]
names(dat)<-c("Zip","cuCurrent","PaCurrent","PoCurrent","Contact","Ext","Fax","email","Status")
sum(dat$Zip * dat$Ext, na.rm=T)
rowIndex=18:23colIndex=7:15dat<-read.xlsx("Q1Q3.xlsx",sheetIndex=1,rowIndex=rowIndex,colIndex=colIndex,header=TRUE)sum(dat$Zip*dat$Ext, na.rm=T)
rowIndex=18:23
colIndex=7:15
dat<-read.xlsx("Q1Q3.xlsx",sheetIndex=1,rowIndex=rowIndex,colIndex=colIndex,header=TRUE)
sum(dat$Zip*dat$Ext, na.rm=TRUE)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
data <- read.xml(fileURL)
library(xml)
library(XML)
install.packages(XML)
library(XML)
install.packages("XML")
library(XML)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(fileURL,destfile = "./Q1Q4.xml", method = "curl")
doc<-xmlTreeParse(fileUrl,useInternal=TRUE)
doc<-xmlTreeParse(fileURL,useInternal=TRUE)
download.file(fileURL,destfile = "./Q1Q4.xml", method = "curl")
doc<-xmlTreeParse(fileURL,useInternal=TRUE)
fileUrl<-"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode<-xmlRoot(doc)
sum(xpathSApply(rootNode,"//zipcode",xmlValue)=="21231")
fileURL <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"download.file(fileURL,destfile = "./Q1Q4.xml", method = "curl")doc<-xmlTreeParse(fileURL,useInternal=TRUE)rootNode<-xmlRoot(doc)sum(xpathSApply(rootNode,"//zipcode",xmlValue)=="21231")
fileURL <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"doc<-xmlTreeParse(fileURL,useInternal=TRUE)rootNode<-xmlRoot(doc)sum(xpathSApply(rootNode,"//zipcode",xmlValue)=="21231")
fileURL <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileURL,useInternal=TRUE)
rootNode<-xmlRoot(doc)
sum(xpathSApply(rootNode,"//zipcode",xmlValue)=="21231")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"download.file(fileURL,destfile = "./Q1Q5.csv", method = "curl")data <- read.csv("Q1Q5.csv", header = TRUE)DT<-data.frame(data)file<-tempfile()write.table(DT,file=file,row.names=FALSE,col.names=TRUE)system.time(fread(file))system.time(read.table(file,header=TRUE))DT<-fread("Q1Q5.csv")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileURL,destfile = "./Q1Q5.csv", method = "curl")
data <- read.csv("Q1Q5.csv", header = TRUE)
DT<-data.frame(data)
file<-tempfile()
write.table(DT,file=file,row.names=FALSE,col.names=TRUE)
system.time(fread(file))
system.time(read.table(file,header=TRUE))
DT<-fread("Q1Q5.csv")
install.packages("data.table")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"download.file(fileURL,destfile = "./Q1Q5.csv", method = "curl")data <- read.csv("Q1Q5.csv", header = TRUE)DT<-data.frame(data)file<-tempfile()write.table(DT,file=file,row.names=FALSE,col.names=TRUE)system.time(fread(file))system.time(read.table(file,header=TRUE))DT<-fread("Q1Q5.csv")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileURL,destfile = "./Q1Q5.csv", method = "curl")
data <- read.csv("Q1Q5.csv", header = TRUE)
DT<-data.frame(data)
file<-tempfile()
write.table(DT,file=file,row.names=FALSE,col.names=TRUE)
system.time(fread(file))
library(data.table)
system.time(fread(file))
system.time(read.table(file,header=TRUE))
DT<-fread("Q1Q5.csv")
#A
st = proc.time()
for (i in 1:100){
sapply(split(DT$pwgtp15,DT$SEX),mean)
}
print (proc.time() - st)
#C
st = proc.time()
for (i in 1:100){
mean(DT$pwgtp15,by=DT$SEX)
}
print (proc.time() - st)#C
st = proc.time()
for (i in 1:100){
mean(DT$pwgtp15,by=DT$SEX)
}
print (proc.time() - st)
#D
st = proc.time()
for (i in 1:100){
tapply(DT$pwgtp15,DT$SEX,mean)
}
print (proc.time() - st)
#E
st = proc.time()
for (i in 1:100){
mean(DT[DT$SEX==1,]$pwgtp15);mean(DT[DT$SEX==2,]$pwgtp15)
}
print (proc.time() - st)
#Est = proc.time()for (i in 1:100){    DT[,mean(pwgtp15),by=SEX]}print (proc.time() - st)
st = proc.time()for (i in 1:100){    DT[,mean(pwgtp15),by=SEX]}print (proc.time() - st)
st = proc.time()
for (i in 1:100){    DT[,mean(pwgtp15),by=SEX]}
#F
st = proc.time()
for (i in 1:100){
DT[,mean(pwgtp15),by=SEX]
}
print (proc.time() - st)
#B
st = proc.time()
for (i in 1:100){
rowMeans(DT)[DT$SEX==1];rowMeans(DT)[DT$SEX==2]
}
print (proc.time() - st)
st = proc.time()for (i in 1:100){    mean(DT$pwgtp15,by=DT$SEX)}print (proc.time() - st)
st = proc.time()
for (i in 1:100){    mean(DT$pwgtp15,by=DT$SEX)}
st = proc.time()
for (i in 1:100){}
mean(DT$pwgtp15,by=DT$SEX)
st = proc.time()for (i in 1:100){    mean(DT$pwgtp15,by=DT$SEX)}print (proc.time() - st)
st = proc.time()for (i in 1:100){    sapply(split(DT$pwgtp15,DT$SEX),mean)}print (proc.time() - st)
st = proc.time()for (i in 1:100){    sapply(split(DT$pwgtp15,DT$SEX),mean)}print (proc.time() - st)
st = proc.time()
for (i in 1:100){
sapply(split(DT$pwgtp15,DT$SEX),mean)
}
print (proc.time() - st)
time1 <- replicate(race, unname(system.time(DT[, mean(pwgtp15), by = SEX]))[1])
mean(DT$pwgtp15, by = DT$SEX)
horse2 <- replicate(race, unname(system.time(tapply(DT$pwgtp15, DT$SEX, mean)))[1])
horse3 <- replicate(race, unname(system.time(sapply(split(DT$pwgtp15, DT$SEX), mean)))[1])
installed.packages(httr)
install.packages("httr")
install.packages("httpuv")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "cecd9b17ff65735fdfb1",
secret = "d1990b52328e8d7b96a70171bf3b97cc8ba2afdb")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httr)
oauth_endpoints("github")
dataSubjectTrain <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset, "train", "subject_train.txt")))
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")
unzip(zipfile="./data/Dataset.zip",exdir="./data")
library(dplyr)
library(data.table)
library(tidyr)
dataSubjectTrain <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset, "train", "subject_train.txt")))
dataSubjectTrain <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset, "train", "subject_train.txt")))
dataSubjectTrain <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "train", "subject_train.txt")))
dataSubjectTest  <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "test" , "subject_test.txt" )))
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")
unzip(zipfile="./data/Dataset.zip",exdir="./data")
library(dplyr)
library(data.table)
library(tidyr)
dataSubjectTrain <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset, "train", "subject_train.txt")))
dataSubjectTest  <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "test" , "subject_test.txt" )))
dataSubjectTrain <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "train", "subject_train.txt")))
dataSubjectTest  <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "test" , "subject_test.txt" )))
dataActivityTrain <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "train", "Y_train.txt")))
dataActivityTest  <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "test" , "Y_test.txt" )))
dataTrain <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "train", "X_train.txt" )))
dataTest  <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "test" , "X_test.txt" )))
alldataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
setnames(alldataSubject, "V1", "subject")
alldataActivity<- rbind(dataActivityTrain, dataActivityTest)
setnames(alldataActivity, "V1", "activityNum")
setnames(alldataSubject, "V1", "subject")
alldataActivity<- rbind(dataActivityTrain, dataActivityTest)
setnames(alldataActivity, "V1", "activityNum")
setnames(alldataSubject, "V1", "subject")
alldataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
dataSubjectTrain <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "train", "subject_train.txt")))
dataSubjectTest  <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "test" , "subject_test.txt" )))
dataActivityTrain <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "train", "Y_train.txt")))
dataActivityTest  <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "test" , "Y_test.txt" )))
dataTrain <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "train", "X_train.txt" )))
dataTest  <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "test" , "X_test.txt" )))
alldataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
setnames(alldataSubject, "V1", "subject")
alldataActivity<- rbind(dataActivityTrain, dataActivityTest)
setnames(alldataActivity, "V1", "activityNum")
dataTable <- rbind(dataTrain, dataTest)
dataFeatures <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "features.txt")))
setnames(dataFeatures, names(dataFeatures), c("featureNum", "featureName"))
colnames(dataTable) <- dataFeatures$featureName
activityLabels<- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "activity_labels.txt")))
setnames(activityLabels, names(activityLabels), c("activityNum","activityName"))
alldataSubjAct<- cbind(alldataSubject, alldataActivity)
dataTable <- cbind(alldataSubjAct, dataTable)
dataFeaturesMeanStd <- grep("mean\\(\\)|std\\(\\)",dataFeatures$featureName,value=TRUE)
dataFeaturesMeanStd <- union(c("subject","activityNum"), dataFeaturesMeanStd)
dataTable<- subset(dataTable,select=dataFeaturesMeanStd)
dataTable <- merge(activityLabels, dataTable , by="activityNum", all.x=TRUE)
dataTable$activityName <- as.character(dataTable$activityName)
dataAggr<- aggregate(. ~ subject - activityName, data = dataTable, mean)
dataTable<- tbl_df(arrange(dataAggr,subject,activityName))
head(str(dataTable),2)
write.table(dataTable, "TidyData.txt", row.name=FALSE)
write.table(https://github.com/Kristineloh/Getting-and-Cleaning-Data-Project/blob/master/TidyData.txt, row.name= Fales)
write.table("https://github.com/Kristineloh/Getting-and-Cleaning-Data-Project/blob/master/TidyData.txt", row.name= Fales)
write.table("https://github.com/Kristineloh/Getting-and-Cleaning-Data-Project/blob/master/TidyData.txt", row.name= FALSE)
x <- write.table("https://github.com/Kristineloh/Getting-and-Cleaning-Data-Project/blob/master/TidyData.txt", row.name= FALSE)
View(x)
x
x <- write.table(,"https://github.com/Kristineloh/Getting-and-Cleaning-Data-Project/blob/master/TidyData.txt", row.name= FALSE)
x <- write.table(data.frame("https://github.com/Kristineloh/Getting-and-Cleaning-Data-Project/blob/master/TidyData.txt"), row.name= FALSE)
x
x <- "https://github.com/Kristineloh/Getting-and-Cleaning-Data-Project/blob/master/TidyData.txt"
write.table(x,"tidyData.txt",row.names = FALSE)
x
y <- write.table(x,"tidyData.txt",row.names = FALSE)
View(y)
y
write.table(dataTable, "TidyData.txt", sep = "\t", row.name=FALSE)
f(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")
unzip(zipfile="./data/Dataset.zip",exdir="./data")
library(dplyr)
library(data.table)
library(tidyr)
dataSubjectTrain <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "train", "subject_train.txt")))
dataSubjectTest  <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "test" , "subject_test.txt" )))
dataActivityTrain <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "train", "Y_train.txt")))
dataActivityTest  <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "test" , "Y_test.txt" )))
dataTrain <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "train", "X_train.txt" )))
dataTest  <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "test" , "X_test.txt" )))
alldataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
setnames(alldataSubject, "V1", "subject")
alldataActivity<- rbind(dataActivityTrain, dataActivityTest)
setnames(alldataActivity, "V1", "activityNum")
dataTable <- rbind(dataTrain, dataTest)
dataFeatures <- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "features.txt")))
setnames(dataFeatures, names(dataFeatures), c("featureNum", "featureName"))
colnames(dataTable) <- dataFeatures$featureName
activityLabels<- tbl_df(read.table(file.path("~/Desktop/Data/UCI HAR Dataset", "activity_labels.txt")))
setnames(activityLabels, names(activityLabels), c("activityNum","activityName"))
alldataSubjAct<- cbind(alldataSubject, alldataActivity)
dataTable <- cbind(alldataSubjAct, dataTable)
dataFeaturesMeanStd <- grep("mean\\(\\)|std\\(\\)",dataFeatures$featureName,value=TRUE)
dataFeaturesMeanStd <- union(c("subject","activityNum"), dataFeaturesMeanStd)
dataTable<- subset(dataTable,select=dataFeaturesMeanStd)
dataTable <- merge(activityLabels, dataTable , by="activityNum", all.x=TRUE)
dataTable$activityName <- as.character(dataTable$activityName)
dataAggr<- aggregate(. ~ subject - activityName, data = dataTable, mean)
dataTable<- tbl_df(arrange(dataAggr,subject,activityName))
head(str(dataTable),2)
write.table(dataTable, "TidyData.txt", sep = "\t", row.name=FALSE)
write.table(dataTable, "TidyData.txt", sep = "\t", row.name=FALSE)
setwd("~/Desktop/Getting and Cleaning Data Project")
write.table(dataTable, "TidyData.txt", sep = "\t", row.name=FALSE)
